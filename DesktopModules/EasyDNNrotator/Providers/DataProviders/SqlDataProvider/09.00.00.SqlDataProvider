IF NOT EXISTS (SELECT RotatorTypeID FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorType] WHERE RotatorTypeID = 20)
BEGIN
	INSERT {databaseOwner}[{objectQualifier}EasyDNNRotatorType] ([RotatorTypeID],[Name],[Description],[Identifier],[Position]) VALUES(20,'Video Background Rotator','(HTML, Images and Video)','VideoBackgroundRotator',20)
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorMultiRSettings' and column_name = 'VideoParametersJson')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorMultiRSettings] ADD VideoParametersJson NVARCHAR(MAX) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorContent' and column_name = 'ContentMetaJson')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorContent] ADD ContentMetaJson NVARCHAR(MAX) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNRotatorContent' and column_name = 'VideoDuration')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNRotatorContent] ADD VideoDuration INT NULL
END
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorGetContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNRotatorGetContent]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorGetContent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNRotatorGetContent] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNRotatorGetContent]
	@ModuleID INT = NULL,
    @ListID INT,
    @Limit INT,
    @Type NVARCHAR(40) = 'AdvancedRotator',
    @LocalCode NVARCHAR(20) = NULL,
    @Randomize BIT = 0,
    @HideUnlocalizedItems BIT = 0
AS

SET NOCOUNT ON;
DECLARE @sqlcommand NVARCHAR(MAX);
DECLARE @paramList NVARCHAR(2000);

SET @paramList = N'
	 @ModuleID INT
	,@ListID INT
	,@Limit INT
	,@LocalCode NVARCHAR(20)'

SET @sqlcommand = N'
SET NOCOUNT ON;
DECLARE @CurrentDate datetime;
SET @CurrentDate = GETUTCDATE();

SELECT TOP (@Limit) rc.[ContentID],rc.[UserID] '

IF @LocalCode IS NULL
SET @sqlcommand = @sqlcommand + N'
,rc.[Title],rc.[SubTitle],rc.[Description],rc.[HTMLContent],rc.[Link] '
ELSE
SET @sqlcommand = @sqlcommand + N'
,CASE WHEN rlcsq.[Title] IS NULL THEN rc.[Title] ELSE rlcsq.[Title] END AS [Title]
,CASE WHEN rlcsq.[SubTitle] IS NULL THEN rc.[SubTitle] ELSE rlcsq.[SubTitle] END AS [SubTitle]
,CASE WHEN rlcsq.[Description] IS NULL THEN rc.[Description] ELSE rlcsq.[Description] END AS [Description]
,CASE WHEN rlcsq.[HTMLContent] IS NULL THEN rc.[HTMLContent] ELSE rlcsq.[HTMLContent] END AS [HTMLContent]
,CASE WHEN rlcsq.[Link] IS NULL THEN rc.[Link] ELSE rlcsq.[Link] END AS [Link] '

SET @sqlcommand = @sqlcommand + N'
,rc.[FileLocation],rc.[FileSystemName],rc.[ContentName],rc.[FileExtension],rc.[ThumbLocation],rc.[ThumbSystemName]
,rc.[ThumbName],rc.[ThumbExtension],rc.[Width],rc.[Height],rc.[VideoEmbedData],rc.[ContentType],rc.[DateCreated]
,rc.[LastModified],rc.[Visible],rc.[StartDate] AS PublishDate,rc.[EndDate] AS [ExpireDate],ilc.[Position],cs.ImageSizes
,rc.[ContentMetaJson],rc.[VideoDuration]
FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorContent] AS rc
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorItemsListContent] AS ilc ON ilc.ContentID = rc.ContentID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorContentInfo] as cs ON cs.ContentID = rc.ContentID AND cs.ModuleID = @ModuleID '

IF @LocalCode IS NOT NULL
BEGIN
	IF @HideUnlocalizedItems = 0
	SET @sqlcommand = @sqlcommand + N' LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorContentLoc] as rlcsq ON rc.ContentID = rlcsq.ContentID AND rlcsq.LocalCode=@LocalCode ';
	ELSE
	SET @sqlcommand = @sqlcommand + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorContentLoc] as rlcsq ON rc.ContentID = rlcsq.ContentID AND rlcsq.LocalCode=@LocalCode ';
END

SET @sqlcommand = @sqlcommand + N'
WHERE ilc.ListID = @ListID '

IF @Type <> 'AllContentGVLoc'
	SET @sqlcommand = @sqlcommand + N' AND ((rc.[StartDate] IS NULL AND rc.[EndDate] IS NULL) OR (@CurrentDate BETWEEN rc.[StartDate] AND rc.[EndDate])) '


IF @Type = 'ExceptVideo'
	SET @sqlcommand = @sqlcommand + N' AND rc.ContentType <> ''Video'' '
ELSE IF @Type = 'ExceptEmbedVideo'
	SET @sqlcommand = @sqlcommand + N' AND rc.ContentType <> ''EmbedVideo'' '
ELSE IF @Type = 'AdvancedRotator'
	SET @sqlcommand = @sqlcommand + N' AND rc.ContentType = ''Image'' '
ELSE IF @Type = 'ImageEmbedHTML'
	SET @sqlcommand = @sqlcommand + N' AND (rc.ContentType = ''Image'' OR rc.ContentType = ''EmbedVideo'' OR rc.ContentType = ''HTML'' OR rc.ContentType = ''Video'' OR rc.ContentType = ''AmazonS3'') '
ELSE IF @Type = 'FlashCubeRotator'
	SET @sqlcommand = @sqlcommand + N' AND (rc.ContentType = ''Image'' OR rc.ContentType = ''Video'') '

IF @Randomize = 0
	SET @sqlcommand = @sqlcommand + N' ORDER BY ilc.[Position] ';
ELSE
	SET @sqlcommand = @sqlcommand + N' ORDER BY NEWID() ';
	
exec sp_executesql @statement = @sqlcommand
	,@paramList = @paramList
	,@ModuleID = @ModuleID
	,@ListID = @ListID
	,@Limit = @Limit
	,@LocalCode = @LocalCode
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorCopyListContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNRotatorCopyListContent]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNRotatorCopyListContent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNRotatorCopyListContent] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNRotatorCopyListContent]
	@ContentID int,
	@CopyToListID int,
	@FileLocation nvarchar(500) = '',
	@FileSystemName nvarchar(200) = '',
	@ThumbLocation nvarchar(500) = '',
	@ThumbSystemName nvarchar(200) = ''
AS
SET NOCOUNT ON;
DECLARE @MaxPosition int;
SET @MaxPosition = 10;
DECLARE @InsertContentID int;
SET @InsertContentID = 0;
DECLARE @ReturnVal int;
SET @ReturnVal = 0;
BEGIN TRANSACTION;
BEGIN TRY
	INSERT INTO {databaseOwner}[{objectQualifier}EasyDNNRotatorContent]
	SELECT rc.[UserID]
		,rc.[Title]
		,rc.[SubTitle]
		,rc.[Description]
		,rc.[HTMLContent]
		,rc.[Link]
		,@FileLocation
		,@FileSystemName
		,rc.[ContentName]
		,rc.[FileExtension]
		,@ThumbLocation
		,@ThumbSystemName
		,rc.[ThumbName]
		,rc.[ThumbExtension]
		,rc.[Width]
		,rc.[Height]
		,rc.[VideoEmbedData]
		,rc.[ContentType]
		,GETUTCDATE()
		,GETUTCDATE()
		,rc.[Visible]
		,rc.[StartDate]
		,rc.[EndDate]
		,rc.[ContentMetaJson]
		,rc.[VideoDuration]
	FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorContent] AS rc WHERE ContentID=@ContentID 
	
	SET @InsertContentID = SCOPE_IDENTITY();
	
	UPDATE {databaseOwner}[{objectQualifier}EasyDNNRotatorList] SET [LastModified] = GETUTCDATE() WHERE ListID = @CopyToListID

	IF EXISTS (SELECT Position FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorItemsListContent] WHERE [ListID] = @CopyToListID)
		BEGIN
			SELECT @MaxPosition = max(Position) FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorItemsListContent] WHERE [ListID] = @CopyToListID;
			SET @MaxPosition = @MaxPosition + 10;
		END
	INSERT INTO {databaseOwner}[{objectQualifier}EasyDNNRotatorItemsListContent]([ListID],[ContentID],[DateCreated],[Position])
		 VALUES (@CopyToListID, @InsertContentID, GETUTCDATE(), @MaxPosition)
	INSERT {databaseOwner}[{objectQualifier}EasyDNNRotatorContentLoc] SELECT [ContentID] = @InsertContentID, rcl.[LocalCode], rcl.[LocalString], rcl.[Title], rcl.[SubTitle], rcl.[Description], rcl.[HTMLContent], rcl.[Link] FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorContentLoc] AS rcl WHERE ContentID = @ContentID;
	SET @ReturnVal = 1;
END TRY
BEGIN CATCH
	SET @ReturnVal = 0;
	IF @@TRANCOUNT > 0
		ROLLBACK TRANSACTION;
END CATCH;

IF @@TRANCOUNT > 0
	COMMIT TRANSACTION;

RETURN @ReturnVal;

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNrotatorNewsGetAllContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNrotatorNewsGetAllContent]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNrotatorNewsGetAllContent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNrotatorNewsGetAllContent] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNrotatorNewsGetAllContent]
	@PortalID INT,
	@UserID INT,
	@RotatorModuleID INT,
	@OpenInTab INT,
	@OpenInModule INT,
	@RowCount INT,
	@OrderByColumnName NVARCHAR(30),
	@OrderByDirection NVARCHAR(4),
	@OrderByCustomFieldID INT = NULL,
	@OrderBySecondColumnName NVARCHAR(30) = NULL,
	@OrderBySecondDirection NVARCHAR(4) = NULL,
	@OrderBySecondCustomFieldID INT = NULL,
	@OrderByThirdColumnName NVARCHAR(30) = NULL,
	@OrderByThirdDirection NVARCHAR(4) = NULL,
	@OrderByThirdCustomFieldID INT = NULL,
	@Featured BIT = 0,
	@OnlyWithImage BIT = 1,
	@Randomize BIT = 0,
	@DescriptionSource TINYINT = 1,
	@LocaleCode NVARCHAR(20) = NULL,
	@FilterByDNNUserID INT = 0,
	@FilterByDNNGroupID INT = 0,
	@ShowAllAuthors BIT = 1,
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 0,
	@PermissionSettingsSource TINYINT = 0,
	@PermissionsModuleID INT = 0,
	@HideUnlocalizedItems BIT = 0,
	@OnlyOneCategory INT = 0,
	@StartDate DATETIME = NULL,
	@DateRangeType TINYINT = 0,
	@FilterByTagsArticleID INT = 0,
	@IsPortalSharing BIT = 0,
	@RestrictionByDateRange SMALLINT = NULL
AS
SET NOCOUNT ON;

DECLARE @sqlcommand NVARCHAR(MAX);
DECLARE @paramList NVARCHAR(1000);
SET @paramList = N'
	 @PortalID INT
	,@UserID INT
	,@RotatorModuleID INT
	,@OpenInTab INT
	,@OpenInModule INT
	,@LocaleCode NVARCHAR(20)
	,@RowCount INT
	,@FilterByDNNUserID INT
	,@FilterByDNNGroupID INT
	,@PermissionsModuleID INT
	,@OnlyOneCategory INT
	,@StartDate DATETIME
	,@FilterByTagsArticleID INT
	,@OrderByCustomFieldID INT
	,@OrderBySecondCustomFieldID INT
	,@OrderByThirdCustomFieldID INT
	,@AdminOrSuperUser BIT
	,@PermissionSettingsSource TINYINT
	,@IsPortalSharing BIT
	,@RestrictionByDateRange SMALLINT'

SET @sqlcommand = N'
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @UserViewCategories TABLE (CategoryID INT PRIMARY KEY);
DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT PRIMARY KEY);
DECLARE @FiltredByCategories TABLE (CategoryID INT PRIMARY KEY);
DECLARE @LocalizedCategories TABLE (ID INT PRIMARY KEY, Name NVARCHAR(200), Position INT, CategoryURL NVARCHAR(1500));
DECLARE @UserInRoles TABLE (RoleID INT PRIMARY KEY);

INSERT INTO @UserInRoles SELECT [RoleID] FROM {databaseOwner}[{objectQualifier}EDS_UserInRoles](@UserID,@PortalID,@CurrentDate); '

DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @RotatorModuleID;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalID ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalID ';
END

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO @UserViewCategories
	SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EDS_NewsViewCategoriesMultiPortal](@RotatorModuleID,@UserID,@PortalID,@AdminOrSuperUser,@PermissionSettingsSource,@PermissionsModuleID,@CurrentDate) '
ELSE
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO @UserViewCategories
	SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EDS_RotatorNewsViewCategories](@UserID,@PortalID,@AdminOrSuperUser,@PermissionSettingsSource,@PermissionsModuleID,@CurrentDate); '

IF @OnlyOneCategory <> 0 -- filtrira se po jednoj kategoriji
BEGIN
	SET @sqlcommand = @sqlcommand + N' 
	INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories WHERE CategoryID = @OnlyOneCategory;
	INSERT INTO @FiltredByCategories SELECT @OnlyOneCategory; '
END
ELSE
BEGIN
	IF @CategoryFilterType = 0 -- 0 All categories
		SET @sqlcommand = @sqlcommand + N' 
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '; '
	ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		SET @sqlcommand = @sqlcommand + N' 
		INSERT INTO @UserViewCategoriesWithFilter 
		SELECT cl.[CategoryID] FROM @UserViewCategories AS cl
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorArticleLink] AS ral ON ral.CategoryID = cl.CategoryID AND ral.ModuleID = @RotatorModuleID
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorArticleLink] WHERE ModuleID = @RotatorModuleID; '
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		SET @sqlcommand = @sqlcommand + N' 
		WITH hierarchy AS(
			SELECT [CategoryID], [ParentCategory]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
			WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorArticleLink] WHERE ModuleID = @RotatorModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNRotatorArticleLink] WHERE ModuleID = @RotatorModuleID)) AND ' + @sqlSharingPortalAll + '
			UNION ALL
			SELECT c.[CategoryID], c.[ParentCategory]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.' + @sqlSharingPortalAll + '
			)
		INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
		INSERT INTO @UserViewCategoriesWithFilter SELECT uvc.CategoryID FROM @FiltredByCategories AS nfc INNER JOIN @UserViewCategories AS uvc ON uvc.CategoryID = nfc.CategoryID; '
END

IF @ShowAllAuthors = 0
	SET @sqlcommand = @sqlcommand + N'
	DECLARE @TempAuthorsIDList TABLE (UserID INT PRIMARY KEY);
	INSERT INTO @TempAuthorsIDList
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @RotatorModuleID
	UNION 
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
	WHERE mgi.ModuleID = @RotatorModuleID; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO @LocalizedCategories
	SELECT c.CategoryID AS ID, CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name, c.Position, c.CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID
	WHERE c.CategoryID IN (SELECT CategoryID FROM @UserViewCategories) AND c.' + @sqlSharingPortalAll + ' AND cl.LocaleCode = @LocaleCode; '
ELSE
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO @LocalizedCategories
	SELECT c.CategoryID AS ID, c.CategoryName AS Name, c.Position, c.CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	WHERE c.CategoryID IN (SELECT CategoryID FROM @UserViewCategories) AND c.' + @sqlSharingPortalAll + '; '

IF @FilterByTagsArticleID <> 0
SET @sqlcommand = @sqlcommand + N'
	DECLARE @TempTagIDList TABLE (TagID INT PRIMARY KEY);
	INSERT INTO @TempTagIDList
	SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @FilterByTagsArticleID; '

IF @OrderByCustomFieldID IS NOT NULL
BEGIN
	SET @OrderByColumnName = (SELECT {databaseOwner}[{objectQualifier}EDS_NewsOrderByColumnName](@OrderByCustomFieldID));

	IF @OrderByColumnName IS NULL
	BEGIN
		SET @OrderByCustomFieldID = NULL;
		SET @OrderByColumnName = N'[PublishDate]';
		SET @OrderBySecondColumnName = NULL;
		SET @OrderByThirdColumnName = NULL;
	END
END

IF @OrderBySecondCustomFieldID IS NOT NULL
BEGIN
	SET @OrderBySecondColumnName = (SELECT {databaseOwner}[{objectQualifier}EDS_NewsOrderByColumnName](@OrderBySecondCustomFieldID));

	IF @OrderBySecondColumnName IS NULL
	BEGIN
		SET @OrderBySecondCustomFieldID = NULL;
		SET @OrderBySecondColumnName = NULL;
	END
END

IF @OrderByThirdCustomFieldID IS NOT NULL
BEGIN
	SET @OrderByThirdColumnName = (SELECT {databaseOwner}[{objectQualifier}EDS_NewsOrderByColumnName](@OrderByThirdCustomFieldID));

	IF @OrderByThirdColumnName IS NULL
	BEGIN
		SET @OrderByThirdCustomFieldID = NULL;
		SET @OrderByThirdColumnName = NULL;
	END
END

DECLARE @CheckOrStatement BIT;

SET @sqlcommand = @sqlcommand + N'
;WITH MainFilters AS(
	SELECT na.[ArticleID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorNewsBridge] AS rnb ON na.ArticleID = rnb.ArticleID AND rnb.RotatorID=@RotatorModuleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @FiltredByCategories) '
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode '
		IF @FilterByTagsArticleID <> 0 SET @sqlcommand = @sqlcommand + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID INNER JOIN @TempTagIDList AS ttl ON ttl.TagID = ti.TagID '
		IF @FilterByDNNGroupID <> 0
			SET @sqlcommand = @sqlcommand + N'
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey '
		ELSE IF @FilterByDNNUserID <> 0
			SET @sqlcommand = @sqlcommand + N'
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey '
	SET @sqlcommand = @sqlcommand + N'
	WHERE ' + @sqlSharingPortal + '
		AND na.Approved = 1
		AND na.Active = 1 '
		IF @RestrictionByDateRange IS NOT NULL
			SET @sqlcommand = @sqlcommand + N' AND na.[PublishDate] BETWEEN DATEADD(day,-@RestrictionByDateRange,@CurrentDate) AND @CurrentDate AND @CurrentDate BETWEEN na.[PublishDate] AND na.[ExpireDate] '
		ELSE
			SET @sqlcommand = @sqlcommand + N' AND @CurrentDate BETWEEN na.[PublishDate] AND na.[ExpireDate] '
		IF @FilterByTagsArticleID <> 0 SET @sqlcommand = @sqlcommand + N' AND na.ArticleID <> @FilterByTagsArticleID '
		IF @LocaleCode IS NULL SET @sqlcommand = @sqlcommand + N' AND na.HideDefaultLocale = 0 '
		IF @Featured = 1 SET @sqlcommand = @sqlcommand + N' AND na.Featured = 1 '
		IF @OnlyWithImage = 1 SET @sqlcommand = @sqlcommand + N' AND na.ArticleImage IS NOT NULL AND na.ArticleImage <> '''' '
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand + N' AND na.UserID = @FilterByDNNUserID '
		ELSE IF @ShowAllAuthors = 0 SET @sqlcommand = @sqlcommand + N' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) '
SET @sqlcommand = @sqlcommand + N'
),
AllContent AS (
	SELECT TOP(@RowCount) ArticleID, StartDate, RecurringID FROM (
	
		SELECT *, ROW_NUMBER() OVER (PARTITION BY ArticleID, RecurringID ORDER BY ArticleID DESC) AS RemoveDuplicates
		FROM (
	
		SELECT n.ArticleID,
		CASE WHEN n.EventArticle = 0 THEN n.PublishDate ELSE CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END END AS StartDate,
		CASE WHEN n.EventArticle = 1 AND ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS RecurringID,
		
		n.PublishDate,n.NumberOfViews,n.RatingValue,n.DateAdded,n.ExpireDate,n.LastModified,n.NumberOfComments,n.Title '
		
		IF @OrderByCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderByColumnName;
		
		IF @OrderBySecondCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderBySecondColumnName;
		
		IF @OrderByThirdCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderByThirdColumnName;
		
		SET @sqlcommand = @sqlcommand + N'	
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n '
		
		IF @OrderByCustomFieldID IS NOT NULL OR @OrderBySecondCustomFieldID IS NOT NULL	OR @OrderByThirdCustomFieldID IS NOT NULL
		BEGIN
			SET @sqlcommand = @sqlcommand + N'
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON n.ArticleID = fv.ArticleID AND ('
			IF @OrderByCustomFieldID IS NOT NULL
			BEGIN
				SET @CheckOrStatement = 1;
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderByCustomFieldID ';
			END
			IF @OrderBySecondCustomFieldID IS NOT NULL
			BEGIN
				IF @CheckOrStatement = 1
					SET @sqlcommand = @sqlcommand + N'OR'; 
				ELSE
					SET @CheckOrStatement = 1;
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderBySecondCustomFieldID ';
			END
			IF @OrderByThirdCustomFieldID IS NOT NULL
			BEGIN
				IF @CheckOrStatement = 1
					SET @sqlcommand = @sqlcommand + N'OR'; 
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderByThirdCustomFieldID ';
			END
				
			SET @sqlcommand = @sqlcommand + N')'
		END
		
		SET @sqlcommand = @sqlcommand + N'
		INNER JOIN MainFilters AS mf ON mf.ArticleID = n.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.ArticleID IS NOT NULL AND ned.Recurring = 1 AND '
		IF @DateRangeType = 2
			SET @sqlcommand = @sqlcommand + N'
			((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
			OR (nerd.RecurringID IN (SELECT TOP(ned.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
		ELSE IF @DateRangeType = 0
			SET @sqlcommand = @sqlcommand + N'
			(nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
		ELSE SET @sqlcommand = @sqlcommand + N' 1 = 0 '
		
		SET @sqlcommand = @sqlcommand + N'
		WHERE n.ArticleID IN(
		SELECT ArticleID FROM (
			SELECT DISTINCT na.[ArticleID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS nc ON na.ArticleID = nc.ArticleID AND nc.CategoryID IN (SELECT CategoryID FROM @UserViewCategoriesWithFilter)
			WHERE na.HasPermissions = 0 AND na.EventArticle = 0
			UNION ALL
			SELECT ArticleID FROM (
				SELECT na.[ArticleID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				WHERE na.HasPermissions = 1 AND na.EventArticle = 0 '
					IF @AdminOrSuperUser = 0
					BEGIN
						SET @sqlcommand = @sqlcommand + N' AND aup.Show = 1 '
						IF @UserID = -1 SET @sqlcommand = @sqlcommand + N' AND aup.UserID IS NULL '
						ELSE SET @sqlcommand = @sqlcommand + N' AND aup.UserID = @UserID '
					END
				SET @sqlcommand = @sqlcommand + N'
				UNION
				SELECT na.[ArticleID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				WHERE na.HasPermissions = 1 AND na.EventArticle = 0 '
					IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles) '
				SET @sqlcommand = @sqlcommand + N'
			) AS WithPermissions
		) AS ArticlesContent
		UNION
		SELECT ArticleID
		FROM (
			SELECT [ArticleID]
			FROM (
				SELECT DISTINCT na.[ArticleID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na -- EV 1 AND HasPermissions 0 AND Recurring 0
				INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @UserViewCategoriesWithFilter)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
				WHERE na.HasPermissions = 0 '
					IF @DateRangeType = 2 SET @sqlcommand = @sqlcommand + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '
				SET @sqlcommand = @sqlcommand + N'
				UNION ALL
				SELECT DISTINCT na.[ArticleID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na -- EV 1 AND HasPermissions 0 AND Recurring 1
				INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @UserViewCategoriesWithFilter)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND '
				IF @DateRangeType = 2
				SET @sqlcommand = @sqlcommand + N'
					((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
					OR (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
				ELSE IF @DateRangeType = 0
				SET @sqlcommand = @sqlcommand + N'
					(nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
				ELSE SET @sqlcommand = @sqlcommand + N' 1 = 0 '
		
				SET @sqlcommand = @sqlcommand + N'
				WHERE na.HasPermissions = 0
			) AS HasPermissionsFalse
			UNION ALL
			SELECT [ArticleID]
			FROM (
				SELECT [ArticleID]
				FROM (
					SELECT na.[ArticleID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na -- EV 1 AND HasPermissions 1 AND UserPermissions AND Recurring 0
					INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
					WHERE na.HasPermissions = 1 '
						IF @AdminOrSuperUser = 0
						BEGIN
							SET @sqlcommand = @sqlcommand + N' AND aup.Show = 1 '
							IF @UserID = -1 SET @sqlcommand = @sqlcommand + N' AND aup.UserID IS NULL '
							ELSE SET @sqlcommand = @sqlcommand + N' AND aup.UserID = @UserID '
						END
						IF @DateRangeType = 2 SET @sqlcommand = @sqlcommand + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '
					SET @sqlcommand = @sqlcommand + N'
					UNION
					SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na -- EV 1 AND HasPermissions 1 AND RolePermissions AND Recurring 0
					INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0	
					WHERE na.HasPermissions = 1 '
						IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles) '
						IF @DateRangeType = 2 SET @sqlcommand = @sqlcommand + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '
				SET @sqlcommand = @sqlcommand + N'
				) AS NotRecurring
				UNION ALL
				SELECT [ArticleID]
				FROM (
					SELECT na.[ArticleID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na -- EV 1 AND HasPermissions 1 AND UserPermissions AND Recurring 1
					INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] as nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND '
					IF @DateRangeType = 2
						SET @sqlcommand = @sqlcommand + N'
						((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
						OR (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
					ELSE IF @DateRangeType = 0
						SET @sqlcommand = @sqlcommand + N'	
						(nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
					ELSE SET @sqlcommand = @sqlcommand + N' 1 = 0 '
		
					SET @sqlcommand = @sqlcommand + N'
					WHERE na.HasPermissions = 1 '
						IF @AdminOrSuperUser = 0
						BEGIN
							SET @sqlcommand = @sqlcommand + N' AND aup.Show = 1 '
							IF @UserID = -1 SET @sqlcommand = @sqlcommand + N' AND aup.UserID IS NULL '
							ELSE SET @sqlcommand = @sqlcommand + N' AND aup.UserID = @UserID '
						END
						SET @sqlcommand = @sqlcommand + N'
					UNION
					SELECT na.[ArticleID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na -- EV 1 AND HasPermissions 1 AND RolePermissions AND Recurring 0
					INNER JOIN MainFilters AS mf ON na.ArticleID = mf.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND '
					IF @DateRangeType = 2
					SET @sqlcommand = @sqlcommand + N'
							((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
							OR (nerd.RecurringID IN (SELECT TOP(ne.UpcomingOccurrences) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
					ELSE IF @DateRangeType = 0
						SET @sqlcommand = @sqlcommand + N'	
						(nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
					ELSE SET @sqlcommand = @sqlcommand + N' 1 = 0 '
		
						SET @sqlcommand = @sqlcommand + N'
					WHERE na.HasPermissions = 1 '
						IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles) '
				SET @sqlcommand = @sqlcommand + N'
				) AS Recurring
			) AS HasPermissionsTrue
		) AS EventsContent
		)
	) AS inResult
	) AS n WHERE RemoveDuplicates < 2 ORDER BY '
	
	IF @Randomize = 1 SET @sqlcommand = @sqlcommand + N'NEWID() '
	ELSE 
	BEGIN
				
		IF @OrderByDirection = 'ASC'
			SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'

		SET @sqlcommand = @sqlcommand + N'n.'+ @OrderByColumnName + N' ' + @OrderByDirection
		
		IF @OrderBySecondColumnName IS NOT NULL
		BEGIN
			IF @OrderBySecondDirection = 'ASC'
				SET @sqlcommand = @sqlcommand + N',(CASE WHEN ' + @OrderBySecondColumnName + ' IS NULL THEN 1 ELSE 0 END)'
			
			SET @sqlcommand = @sqlcommand + N',n.'+ @OrderBySecondColumnName + N' ' + @OrderBySecondDirection
		END
		
		IF @OrderByThirdColumnName IS NOT NULL
		BEGIN
			IF @OrderByThirdDirection = 'ASC'
				SET @sqlcommand = @sqlcommand + N',(CASE WHEN ' + @OrderByThirdColumnName + ' IS NULL THEN 1 ELSE 0 END)'
			
			SET @sqlcommand = @sqlcommand + N',n.'+ @OrderByThirdColumnName + N' ' + @OrderByThirdDirection
		END
	END
	
SET @sqlcommand = @sqlcommand + N'
) '
IF @LocaleCode IS NULL
BEGIN
SET @sqlcommand = @sqlcommand + N'
SELECT ArticleID,UserID,AuthorAliasName,ArticleImage,Title,SubTitle,Description,HTMLContent,FileSystemName, TitleLink,DetailType AS ContentType,
	DetailTypeData, PublishDate,NumberOfViews,RatingValue,DateAdded,ExpireDate,LastModified,NumberOfComments,Position,CategoryID,CFGroupeID, StartDate, RecurringID, '
	IF @CategoryFilterType = 0 SET @sqlcommand = @sqlcommand + CAST(@OpenInTab AS NVARCHAR(20)) + N' AS TabID, ' + CAST(@OpenInModule AS NVARCHAR(20)) +' AS NewsModuleID, '
	ELSE SET @sqlcommand = @sqlcommand + N' CASE WHEN inResult.TabID IS NULL THEN @OpenInTab ELSE inResult.TabID END AS TabID, CASE WHEN inResult.NewsModuleID IS NULL THEN @OpenInModule ELSE inResult.NewsModuleID END AS NewsModuleID, '
	SET @sqlcommand = @sqlcommand + N'
	EventArticle,
	(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = inResult.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root''))
	 AS CatToShow,ImageSizes
FROM (	
	
	SELECT  n.ArticleID,n.UserID,n.AuthorAliasName,n.ArticleImage,n.Title, n.SubTitle, '
		IF @DescriptionSource = 1 SET @sqlcommand = @sqlcommand + N' n.Summary AS Description, n.Summary AS HTMLContent, '
		ELSE IF @DescriptionSource = 2 SET @sqlcommand = @sqlcommand + N' n.Article AS Description, n.Article AS HTMLContent, '
	
		SET @sqlcommand = @sqlcommand + N'
		rnb.ArticleImage AS FileSystemName, n.TitleLink,n.DetailType, n.DetailTypeData, n.PublishDate,n.NumberOfViews,
		n.RatingValue, n.DateAdded, n.[ExpireDate], n.LastModified,n.NumberOfComments, ncl.Position, ncl.CategoryID, ral.TabID, ral.NewsModuleID, n.EventArticle
		,CFGroupeID, ac.StartDate,ac.RecurringID,rnb.ImageSizes
		,ROW_NUMBER() OVER (PARTITION BY n.ArticleID,ac.RecurringID ORDER BY n.ArticleID DESC) AS RN '
	
		IF @OrderByCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderByColumnName;
		
		IF @OrderBySecondCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderBySecondColumnName;
		
		IF @OrderByThirdCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderByThirdColumnName;
	
	SET @sqlcommand = @sqlcommand + N'
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN AllContent AS ac ON ac.ArticleID = n.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorNewsBridge] AS rnb ON n.ArticleID = rnb.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS nc ON rnb.ArticleID = nc.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS ncl ON ncl.CategoryID = nc.CategoryID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorArticleLink] AS ral on ral.CategoryID = ncl.CategoryID and ral.ModuleID = @RotatorModuleID '
	
		IF @OrderByCustomFieldID IS NOT NULL OR @OrderBySecondCustomFieldID IS NOT NULL	OR @OrderByThirdCustomFieldID IS NOT NULL
		BEGIN
			SET @sqlcommand = @sqlcommand + N'
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON n.ArticleID = fv.ArticleID AND ('
			IF @OrderByCustomFieldID IS NOT NULL
			BEGIN
				SET @CheckOrStatement = 1;
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderByCustomFieldID ';
			END
			IF @OrderBySecondCustomFieldID IS NOT NULL
			BEGIN
				IF @CheckOrStatement = 1
					SET @sqlcommand = @sqlcommand + N'OR'; 
				ELSE
					SET @CheckOrStatement = 1;
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderBySecondCustomFieldID ';
			END
			IF @OrderByThirdCustomFieldID IS NOT NULL
			BEGIN
				IF @CheckOrStatement = 1
					SET @sqlcommand = @sqlcommand + N'OR'; 
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderByThirdCustomFieldID ';
			END
				
			SET @sqlcommand = @sqlcommand + N')'
		END
	
	SET @sqlcommand = @sqlcommand + N'
	WHERE rnb.RotatorID=@RotatorModuleID
	
) AS inResult
WHERE RN < 2 ORDER BY '

	IF @Randomize = 1 SET @sqlcommand = @sqlcommand + N'NEWID() '
	ELSE 
	BEGIN
				
		IF @OrderByDirection = 'ASC'
			SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'

		SET @sqlcommand = @sqlcommand + @OrderByColumnName + N' ' + @OrderByDirection
		
		IF @OrderBySecondColumnName IS NOT NULL
		BEGIN
			IF @OrderBySecondDirection = 'ASC'
				SET @sqlcommand = @sqlcommand + N',(CASE WHEN ' + @OrderBySecondColumnName + ' IS NULL THEN 1 ELSE 0 END)'
			
			SET @sqlcommand = @sqlcommand + N','+ @OrderBySecondColumnName + N' ' + @OrderBySecondDirection
		END
		
		IF @OrderByThirdColumnName IS NOT NULL
		BEGIN
			IF @OrderByThirdDirection = 'ASC'
				SET @sqlcommand = @sqlcommand + N',(CASE WHEN ' + @OrderByThirdColumnName + ' IS NULL THEN 1 ELSE 0 END)'
			
			SET @sqlcommand = @sqlcommand + N','+ @OrderByThirdColumnName + N' ' + @OrderByThirdDirection
		END
	END
	
END
ELSE
BEGIN
SET @sqlcommand = @sqlcommand + N'
SELECT ArticleID,UserID,AuthorAliasName,ArticleImage,Title,SubTitle,CFGroupeID, '
	IF @DescriptionSource = 1 SET @sqlcommand = @sqlcommand + N' Summary AS Description, Summary AS HTMLContent, '
	ELSE IF @DescriptionSource = 2 SET @sqlcommand = @sqlcommand + N' Article AS Description, Article AS HTMLContent, '
	
	SET @sqlcommand = @sqlcommand + N'
	FileSystemName, TitleLink,DetailType AS ContentType, DetailTypeData, PublishDate,NumberOfViews,RatingValue,DateAdded,ExpireDate,LastModified,NumberOfComments,Position,CategoryID, StartDate, RecurringID, '
	IF @CategoryFilterType = 0 SET @sqlcommand = @sqlcommand + CAST(@OpenInTab AS NVARCHAR(20)) + N' AS TabID, ' + CAST(@OpenInModule AS NVARCHAR(20)) +' AS NewsModuleID, '
	ELSE SET @sqlcommand = @sqlcommand + N' CASE WHEN inResult.TabID IS NULL THEN @OpenInTab ELSE inResult.TabID END AS TabID, CASE WHEN inResult.NewsModuleID IS NULL THEN @OpenInModule ELSE inResult.NewsModuleID END AS NewsModuleID, '
	
	SET @sqlcommand = @sqlcommand + N'
	EventArticle,
	(SELECT cat.ID, cat.Name, cat.CategoryURL FROM @LocalizedCategories AS Cat INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON c.CategoryID = Cat.ID WHERE c.ArticleID = inResult.ArticleID ORDER BY Position FOR XML AUTO, ROOT(''root''))
	 AS CatToShow,ImageSizes
	FROM
	(
		SELECT na.ArticleID,na.UserID,na.AuthorAliasName, na.ArticleImage,
			CASE WHEN ncloc.Title IS NULL THEN na.Title ELSE ncloc.Title END AS Title,
			CASE WHEN ncloc.SubTitle IS NULL THEN na.SubTitle ELSE ncloc.SubTitle END AS SubTitle,
			CASE WHEN ncloc.Summary IS NULL THEN na.Summary ELSE ncloc.Summary END AS Summary,
			CASE WHEN ncloc.Article IS NULL THEN na.Article ELSE ncloc.Article END AS Article,
			rnb.ArticleImage AS FileSystemName,
			CASE WHEN ncloc.clTitleLink IS NULL THEN na.TitleLink ELSE ncloc.clTitleLink END AS TitleLink,
			na.DetailType, na.DetailTypeData, na.PublishDate, na.NumberOfViews, na.RatingValue, na.DateAdded,
			na.[ExpireDate], na.LastModified, na.NumberOfComments, ncl.Position, ncl.CategoryID,
			ral.TabID, ral.NewsModuleID, na.EventArticle,na.CFGroupeID,ac.StartDate,ac.RecurringID,rnb.ImageSizes
			,ROW_NUMBER() OVER (PARTITION BY na.ArticleID,ac.RecurringID ORDER BY na.ArticleID DESC) AS RN '
	
		IF @OrderByCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderByColumnName;
		
		IF @OrderBySecondCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderBySecondColumnName;
		
		IF @OrderByThirdCustomFieldID IS NOT NULL
			SET @sqlcommand = @sqlcommand + N',fv.' + @OrderByThirdColumnName;
	
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN AllContent AS ac ON na.ArticleID = ac.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorNewsBridge] AS rnb ON rnb.ArticleID = ac.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS nc ON nc.ArticleID = rnb.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS ncl ON ncl.CategoryID = nc.CategoryID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNRotatorArticleLink] AS ral on ral.CategoryID = ncl.CategoryID and ral.ModuleID = @RotatorModuleID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncloc ON ncloc.ArticleID = ac.ArticleID AND ncloc.LocaleCode=@LocaleCode '
	
		IF @OrderByCustomFieldID IS NOT NULL OR @OrderBySecondCustomFieldID IS NOT NULL	OR @OrderByThirdCustomFieldID IS NOT NULL
		BEGIN
			SET @sqlcommand = @sqlcommand + N'
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON na.ArticleID = fv.ArticleID AND ('
			IF @OrderByCustomFieldID IS NOT NULL
			BEGIN
				SET @CheckOrStatement = 1;
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderByCustomFieldID ';
			END
			IF @OrderBySecondCustomFieldID IS NOT NULL
			BEGIN
				IF @CheckOrStatement = 1
					SET @sqlcommand = @sqlcommand + N'OR'; 
				ELSE
					SET @CheckOrStatement = 1;
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderBySecondCustomFieldID ';
			END
			IF @OrderByThirdCustomFieldID IS NOT NULL
			BEGIN
				IF @CheckOrStatement = 1
					SET @sqlcommand = @sqlcommand + N'OR'; 
				SET @sqlcommand = @sqlcommand + N' fv.CustomFieldID = @OrderByThirdCustomFieldID ';
			END
				
			SET @sqlcommand = @sqlcommand + N')'
		END
		
		SET @sqlcommand = @sqlcommand + N'
		WHERE rnb.RotatorID=@RotatorModuleID
	) AS inResult WHERE RN < 2
	ORDER BY '
	
	IF @Randomize = 1 SET @sqlcommand = @sqlcommand + N'NEWID() '
	ELSE 
	BEGIN
				
		IF @OrderByDirection = 'ASC'
			SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'

		SET @sqlcommand = @sqlcommand + @OrderByColumnName + N' ' + @OrderByDirection
		
		IF @OrderBySecondColumnName IS NOT NULL
		BEGIN
			IF @OrderBySecondDirection = 'ASC'
				SET @sqlcommand = @sqlcommand + N',(CASE WHEN ' + @OrderBySecondColumnName + ' IS NULL THEN 1 ELSE 0 END)'
			
			SET @sqlcommand = @sqlcommand + N','+ @OrderBySecondColumnName + N' ' + @OrderBySecondDirection
		END
		
		IF @OrderByThirdColumnName IS NOT NULL
		BEGIN
			IF @OrderByThirdDirection = 'ASC'
				SET @sqlcommand = @sqlcommand + N',(CASE WHEN ' + @OrderByThirdColumnName + ' IS NULL THEN 1 ELSE 0 END)'
			
			SET @sqlcommand = @sqlcommand + N','+ @OrderByThirdColumnName + N' ' + @OrderByThirdDirection
		END
	END
END

exec sp_executesql @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalID = @PortalID
	,@UserID = @UserID
	,@RotatorModuleID = @RotatorModuleID
	,@OpenInTab = @OpenInTab
	,@OpenInModule = @OpenInModule
	,@LocaleCode = @LocaleCode
	,@RowCount = @RowCount
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@PermissionsModuleID = @PermissionsModuleID
	,@OnlyOneCategory = @OnlyOneCategory
	,@StartDate = @StartDate
	,@FilterByTagsArticleID = @FilterByTagsArticleID
	,@OrderByCustomFieldID = @OrderByCustomFieldID
	,@OrderBySecondCustomFieldID = @OrderBySecondCustomFieldID
	,@OrderByThirdCustomFieldID = @OrderByThirdCustomFieldID
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@PermissionSettingsSource = @PermissionSettingsSource
	,@IsPortalSharing = @IsPortalSharing
	,@RestrictionByDateRange = @RestrictionByDateRange
GO